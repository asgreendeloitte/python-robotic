name: UAT Test Automation
run-name: UAT Test Automation | ${{inputs.oneClickRunId}}
on:
  workflow_dispatch:
    inputs:
      oneClickRunId:
        description: 'The run Id from OneClick within QA portal'
        required: false
        type: string       
jobs:
  Setup:
    uses: ./.github/workflows/aws_login.yml
    with:
      aws-region: eu-west-2
    secrets:
      aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}

  EFC_DH_Overhaul:
    runs-on: self-hosted
    container:
      image: 990750709598.dkr.ecr.eu-west-2.amazonaws.com/robotframework:2.0
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      credentials:
        username: AWS
        password: ${{ needs.Setup.outputs.aws-password }}
    needs: 
      - Setup
    outputs:
      result: ${{ steps.test-step.outcome }}
    steps:
      - name: Checkout Local
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install requirements
        run: pip install -r requirements.txt

      - name: Run requirements
        id: test-step
        run: |
          #!/bin/bash
          mkdir test-results
          Xvfb :10 -ac &
          robot -T -x test-results.xunit.xml -d test-results TestSuite/E2E/DigitalOverhaul
          exit_code=$?
          tar -cvf result.tar test-results
          exit "$exit_code"

      - name: Create Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: DigitalOverhaul Tests Results
          path: test-results

  EFC_MVP_Stories:
    runs-on: self-hosted
    container:
      image: 990750709598.dkr.ecr.eu-west-2.amazonaws.com/robotframework:2.0
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      credentials:
        username: AWS
        password: ${{ needs.Setup.outputs.aws-password }}
    needs: 
      - Setup
    outputs:
      result: ${{ steps.test-step.outcome }}
    steps:
      - name: Checkout Local
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install requirements
        run: pip install -r requirements.txt

      - name: Run requirements
        id: test-step
        run: |
          #!/bin/bash
          mkdir test-results
          Xvfb :10 -ac &
          robot -T -x test-results.xunit.xml -d test-results TestSuite/E2E/AssignmentRules/MVPStories
          exit_code=$?
          tar -cvf result.tar test-results
          exit "$exit_code"

      - name: Create Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: MVPStories Tests Results
          path: test-results
          
  EFC_UAT_Regression_Agent1:
      runs-on: self-hosted
      container:
        image: 990750709598.dkr.ecr.eu-west-2.amazonaws.com/robotframework:2.0
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
        credentials:
          username: AWS
          password: ${{ needs.Setup.outputs.aws-password }}
      if: success() || failure()
      needs: 
        - Setup
        - EFC_DH_Overhaul
        - EFC_MVP_Stories
      outputs:
        result: ${{ steps.test-step.outcome }}
      steps:
        - name: Checkout Local
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
            token: ${{ secrets.GITHUB_TOKEN }}

        - name: Install requirements
          run: pip install -r requirements.txt

        - name: Run requirements
          id: test-step
          run: |
            #!/bin/bash
            mkdir test-results
            Xvfb :10 -ac &
            robot -T -x test-results.xunit.xml -d test-results TestSuite/E2E/AssignmentRules/AgentRegression1
            exit_code=$?
            tar -cvf result.tar test-results
            exit "$exit_code"

        - name: Create Artifact
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: AgentRegression1 Tests Results
            path: test-results
  
  EFC_UAT_Regression_Agent2:
      runs-on: self-hosted
      container:
        image: 990750709598.dkr.ecr.eu-west-2.amazonaws.com/robotframework:2.0
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
        credentials:
          username: AWS
          password: ${{ needs.Setup.outputs.aws-password }}
      if: success() || failure()
      needs: 
        - Setup
        - EFC_UAT_Regression_Agent1
      outputs:
        result: ${{ steps.test-step.outcome }}
      steps:
        - name: Checkout Local
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
            token: ${{ secrets.GITHUB_TOKEN }}

        - name: Install requirements
          run: pip install -r requirements.txt

        - name: Run requirements
          id: test-step
          run: |
            #!/bin/bash
            mkdir test-results
            Xvfb :10 -ac &
            robot -T -x test-results.xunit.xml -d test-results TestSuite/E2E/AssignmentRules/AgentRegression2
            exit_code=$?
            tar -cvf result.tar test-results
            exit "$exit_code"

        - name: Create Artifact
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: AgentRegression2 Tests Results
            path: test-results

  EFC_UAT_Regression_PPAT:
    runs-on: self-hosted
    container:
      image: 990750709598.dkr.ecr.eu-west-2.amazonaws.com/robotframework:2.0
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      credentials:
        username: AWS
        password: ${{ needs.Setup.outputs.aws-password }}
    if: success() || failure()
    needs:
      - Setup
      - EFC_UAT_Regression_Agent2
    outputs:
      result: ${{ steps.test-step.outcome }}
    steps:
      - name: Checkout Local
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install requirements
        run: pip install -r requirements.txt

      - name: Run requirements
        id: test-step
        run: |
          #!/bin/bash
          mkdir test-results
          Xvfb :10 -ac &
          robot -T -x test-results.xunit.xml -d test-results TestSuite/E2E/PPAT
          exit_code=$?
          tar -cvf result.tar test-results
          exit "$exit_code"

      - name: Create Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: PPAT Tests Results
          path: test-results

  QA_Portal_Results_Test_Failure:
    runs-on: ubuntu-22.04
    if: failure()
    needs: 
        - Setup
        - EFC_DH_Overhaul
        - EFC_MVP_Stories
        - EFC_UAT_Regression_Agent1
        - EFC_UAT_Regression_Agent2
        - EFC_UAT_Regression_PPAT
    outputs:
      test-result: ${{steps.failure-results.outputs.test-result}}
    steps:
      - name: Test Failure
        env:
            API_TOKEN: ${{ secrets.QA_PORTAL_TOKEN }}
        id: failure-results
        run: |
            echo 'test-result=2' >> $GITHUB_OUTPUT

  QA_Portal_Results_Test_Success:
    runs-on: ubuntu-22.04
    if: success() 
    needs: 
        - Setup
        - EFC_DH_Overhaul
        - EFC_MVP_Stories
        - EFC_UAT_Regression_Agent1
        - EFC_UAT_Regression_Agent2
        - EFC_UAT_Regression_PPAT
    outputs:
      test-result: ${{steps.success-results.outputs.test-result}}                    
    steps:
      - name: Test Success
        env:
            API_TOKEN: ${{ secrets.QA_PORTAL_TOKEN }}
        id: success-results
        run: |
            echo 'test-result=1' >> $GITHUB_OUTPUT
                   
  Upload-test-results:
    if: always()
    needs:
      - QA_Portal_Results_Test_Failure 
      - QA_Portal_Results_Test_Success
    runs-on: ubuntu-22.04
    steps:
      - name: Upload test results
        uses: publichealthengland/hpod-uksha-devops-templates/.github/actions/test-automation/upload-test-results@v2
        with: 
          test-id: ${{inputs.oneClickRunId}}
          test-result: ${{needs.QA_Portal_Results_Test_Failure.outputs.test-result || needs.QA_Portal_Results_Test_Success.outputs.test-result}}
          build-link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          qat-portal-token: ${{secrets.QA_PORTAL_TOKEN}}
